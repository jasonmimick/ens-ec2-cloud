{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "This is a sample EC2 template to automate the deployment of an InterSystems server. This example will load and configure an Ensemble server. The configuration contains pulling code from github to load a ZenCloudMessaging node. The image is debian based and when loaded kernel memory settings are configured running Cache. The Ensemble instance will run it's internal web-server over the standard port 5772 and install to the default location /var/isc/ensemble.",
  "Parameters" : {
      
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },    

 	"BucketName" : {
      "Description" : "Name of bucket containing license key and secret stuff",
      "Type" : "String",
	  "Default" : "ens-ec2-cloud"
    },
    "IscInstanceName": {
      "Default": "ENSEMBLE",
      "Description" : "The name of the Ensemble Instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "IscInstallDir": {
      "NoEcho": "false",
	  "Default" : "/var/isc/ensemble",
      "Description" : "Path to where instance will be installed",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100",
      "ConstraintDescription" : "Should be some valid path on the system."
    },
	
	"IscInitialSecurity": {
	  "Default": "Normal",
	  "Description" : "Initial security setting for Cache instance",
      "Type" : "String",
	  "AllowedValues" : [ "Minimal", "Normal", "Locked Down" ] 
	},

	"IscMgrUser" : {
	  "Default" : "cacheusr",
	  "Type" : "String",
	  "Description" : "Login name of the owner of the installation"
	},

	"IscMgrGroup" : {
	  "Default" : "cacheusr",
	  "Type" : "String",
	  "Description" : "Login name of the owner of the installation"
	},

    "IscUserPassword": {
      "NoEcho": "true",
      "Description" : "Password for Cache instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41"
    },

	"ZenCloudMessagingDemoAppleCAFile" : {
	  "Description" : "Certificate Authority file (.cer) to use in APNS SSL Configuration",
	  "Type" : "String",
	  "Default" : "/var/isc/secrets/apple.ca.cer"
	},
	"ZenCloudMessagingDemoAppleCertificateFile" : {
	  "Description" : "Public certificate file (.pem) to use in APNS SSL Configuration",
	  "Type" : "String",
	  "Default" : "/var/isc/secrets/apns.cert.pem"
	},
	"ZenCloudMessagingDemoApplePrivateKeyFile" : {
	  "Description" : "Private key file (.pem) to use in APNS SSL Configuration",
	  "Type" : "String",
	  "Default" : "/var/isc/secrets/apns.privatekey.pem"
	},
	
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }  
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" }
   	},

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "64" : "ami-d3675dba" }
    }
  },
    
  "Resources" : {     

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect"   : "Allow",
            "Action"   : [
              "cloudformation:DescribeStackResource",
              "s3:GetObject"
            ],
            "Resource" :"*"
          }]}
        }]
      }
    },

    "CfnKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "PrivateBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "PrivateBucketPolicy",
          "Statement"    : [{
            "Sid"        : "ReadAccess",
            "Action"     : ["s3:GetObject"],
            "Effect"     : "Allow",
            "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" }, "/*"]]},
            "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
          }]
        },
        "Bucket" : { "Ref" : "BucketName" }
      }
    },

	"HostKeys" : {
  		"Type" : "AWS::IAM::AccessKey",
  		"Properties" : {
    		"UserName" : {"Ref": "CfnUser"}
  	}
	},

    "IscServer": {  
      "Type": "AWS::EC2::Instance",
	  "DependsOn" : "PrivateBucketPolicy",
      "Metadata" : {
		"AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "accessKeyId" : { "Ref" : "CfnKeys" },
            "secretKey" : {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
            "buckets" : [ { "Ref" : "BucketName" } ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
				"vim"		   : [],
				"expect"	   : [],
				"curl"		   : [],
				"python-pip"   : []
              }
            },
            "sources" : {
			 "/home/admin/ens-ec2-cloud" : "https://github.com/jasonmimick/ens-ec2-cloud/tarball/master"
			 ,"/home/admin/gs2014"	: "https://github.com/jasonmimick/gs2014/tarball/master"
             ,"/home/admin/isc_install" : "https://ens-ec2-cloud.s3.amazonaws.com/ensemble-2014.1.0.600.0-lnxsusex64.tar.gz"
            },
			"files" : {
     		 "/var/isc/ensemble/mgr/cache.key" : {
  				"source" : { "Fn::Join" : ["", ["http://s3.amazonaws.com/" , { "Ref" : "BucketName" }, "/007/cache.key"]]},
                "mode"   : "000400",
                "owner"  : "root",
                "group"  : "root",
				"authentication" : "S3AccessCreds"
			 },     		 
     		 "/var/isc/secrets/apns.cert.pem" : {
  				"source" : { "Fn::Join" : ["", ["http://s3.amazonaws.com/" , { "Ref" : "BucketName" }, "/007/apns.cert.pem"]]},
                "mode"   : "000400",
                "owner"  : "root",
                "group"  : "root",
				"authentication" : "S3AccessCreds"
			 },     		 
     		 "/var/isc/secrets/apns.privatekey.pem" : {
  				"source" : { "Fn::Join" : ["", ["http://s3.amazonaws.com/" , { "Ref" : "BucketName" }, "/007/apns.privatekey.pem"]]},
                "mode"   : "000400",
                "owner"  : "root",
                "group"  : "root",
				"authentication" : "S3AccessCreds"
			 },     		 
			 "/var/isc/secrets/apple.ca.cer" : {
				"source" : { "Fn::Join" : ["", ["http://s3.amazonaws.com/" , { "Ref" : "BucketName" }, "/007/apple.ca.cer"]]},
                "mode"   : "000400",
                "owner"  : "root",
                "group"  : "root",
				"authentication" : "S3AccessCreds"
			 },			 
			"/tmp/setup.zencloudmessaging" : {
				 "content" : { "Fn::Join" : ["", [
					"#!/bin/bash -f","\n",
					"# script to setup zencloudmessaing from github","\n",
					"# and configure ensemble to send cloud alerts","\n",
					"NAMESPACE=ENSDEMO","\n",
					"CSESSION=\"",{ "Ref" : "IscInstallDir" },"/bin/csession ",{"Ref":"IscInstanceName"},
						" -U $NAMESPACE\"","\n",
					"/usr/bin/expect <<End-Of-Expect","\n",
					"spawn $CSESSION","\n",
					"expect \"Username: \" {","\n",
					"   send \"_system","\\r\"","\n",
					"}","\n",
					"expect \"Password: \" {","\n",
					"   send \"",{"Ref":"IscUserPassword"},"\\r\"","\n",
					"}","\n",
					"expect \"$NAMESPACE>\" {","\n",
					"   send \"do ##class(%SYSTEM.OBJ).Load(\\\"/home/admin/gs2014/MyZenCloudMessaging.prj.xml\\\",\\\"ck\\\") ","\\r\"","\n",
					"}","\n",
					"expect \"$NAMESPACE>\" {","\n",
					"   send \"w 1 // do Setup^LoadZENCloudMessaging ","\\r\"","\n",
					"}","\n",
					"expect \"$NAMESPACE>\" {","\n",
					"   send \"zn \\\"%SYS\\\"","\\r\"","\n",
					"}","\n",
					"expect \"%SYS>\" {","\n",
					"   send \"do ##class(Security.SSLConfigs).Import(\\\"/tmp/apns.ssl.xml\\\")","\\r\"","\n",
					"expect \"%SYS>\" {","\n",
					"   send \"do ##class(Security.SSLConfigs).Create(\\\"GCMCHROME\\\")","\\r\"","\n",
					"}","\n",
					"expect \"%SYS>\" {","\n",
					"   send \"zn \\\"$NAMESPACE\\\"","\\r\"","\n",
					"}","\n",
					"expect \"$NAMESPACE>\" {","\n",
					"   send \"do ##class(Ens.Director).StartProduction(\\\"Test.ZenCloudMessaging.DevProduction\\\")","\\r\"","\n",
					"}","\n",
					"expect \"$NAMESPACE>\" {","\n",
					"   send \"do SystemReady^ZenCloudMessageDemo(\\\"",
					"",
					"\\\")","\\r\"","\n",
					"}","\n",
					"expect \"$NAMESPACE>\" {","\n",
					"   send \"halt","\\r\"","\n",
					"}","\n",
					"End-Of-Expect","\n"
				
				]]},
				"mode" : "000500",
				"owner" : "root",
				"group" : "root"
			 },
			 "/tmp/apns.ssl.xml" : {
				"content" : { "Fn::Join" : ["", [
				"<?xml version=\"1.0\" encoding=\"UTF-8\"?>","\n",
				"<SSLConfigsExport>","\n",
	  			"<SSLConfigs>","\n",
    			"<CAFile>",
				{ "Ref" : "ZenCloudMessagingDemoAppleCAFile" },
				"</CAFile>","\n",
    			"<CertificateFile>",
				{ "Ref" : "ZenCloudMessagingDemoAppleCertificateFile" },
				"</CertificateFile>","\n",
			    "<CipherList>TLSv1:SSLv3:!ADH:!LOW:!EXP:@STRENGTH</CipherList>","\n",
	    		"<Enabled>true</Enabled>","\n",
    			"<Name>APNS</Name>","\n",
				"<PrivateKeyFile>",
				{ "Ref" : "ZenCloudMessagingDemoApplePrivateKeyFile" },
				"</PrivateKeyFile>","\n",
    			"<PrivateKeyType>2</PrivateKeyType>","\n",
			    "<Protocols>6</Protocols>","\n",
			    "<Type>false</Type>","\n",
		    	"<VerifyDepth>9</VerifyDepth>","\n",
			    "<VerifyPeer>0</VerifyPeer>","\n",
			  	"</SSLConfigs>","\n",
				"</SSLConfigsExport>","\n"
				]]},
				"mode" : "000544",
				"owner" : "root",
				"group" : "root"
			 },	
			 "/tmp/gcmchrome.ssl.xml" : {
				"content" : { "Fn::Join" : ["", [
				"<?xml version=\"1.0\" encoding=\"UTF-8\"?>","\n",
				"<SSLConfigsExport>","\n",
	  			"<SSLConfigs>","\n",
    			"<CAFile>",
				"</CAFile>","\n",
    			"<CertificateFile>",
				"</CertificateFile>","\n",
			    "<CipherList>TLSv1:SSLv3:!ADH:!LOW:!EXP:@STRENGTH</CipherList>","\n",
	    		"<Enabled>true</Enabled>","\n",
    			"<Name>APNS</Name>","\n",
				"<PrivateKeyFile>",
				"</PrivateKeyFile>","\n",
    			"<PrivateKeyType>2</PrivateKeyType>","\n",
			    "<Protocols>6</Protocols>","\n",
			    "<Type>false</Type>","\n",
		    	"<VerifyDepth>9</VerifyDepth>","\n",
			    "<VerifyPeer>1</VerifyPeer>","\n",
			  	"</SSLConfigs>","\n",
				"</SSLConfigsExport>","\n"
				]]},
				"mode" : "000544",
				"owner" : "root",
				"group" : "root"
			 }

			}
          }
		}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "IscSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
		  "sudo apt-get update\n",
          "apt-get -y install python-setuptools\n",
          "wget -P /home/admin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz","\n",
          "mkdir -p /home/admin/aws-cfn-bootstrap-latest","\n",
          "tar xvfz /home/admin/aws-cfn-bootstrap-latest.tar.gz --strip-components=1 -C /home/admin/aws-cfn-bootstrap-latest","\n",
          "sudo easy_install /home/admin/aws-cfn-bootstrap-latest/","\n",
		  "echo 'Installed aws-cfn-bootstrap' >> /home/admin/cloudformation.log","\n",
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  sudo cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install packages\n",
          "sudo cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r IscServer ",
          " --access-key ", { "Ref" : "CfnKeys" },
          " --secret-key ", {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
          " --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

		  "echo 'Ran cfn-init' >> /home/admin/cloudformation.log","\n",
		
		  "sudo pip install awscli","\n",
		  "echo 'Installed awscli' >> /home/admin/cloudformation.log","\n",

		  "# Increase shared memory\n",
		  "echo 'kernel.shmmax=134217728' | sudo tee  -a /etc/sysctl.conf","\n",
		  "sudo sysctl -p\n",

		  "echo 'Updated system shared memory' >> /home/admin/cloudformation.log","\n",
		  "# Create Isc users/groups\n",
		  "sudo addgroup cacheusr","\n",
		  "sudo adduser --system --disabled-password --disabled-login cacheusr","\n",
		  "sudo adduser cacheusr cacheusr","\n",
		  "echo 'Created cacheusr user and group' >> /home/admin/cloudformation.log","\n",

		  "# Make cacheusr owner of secrets, so Cache can read the SSL stuff","\n", 
		  "sudo chown cacheusr:cacheusr /var/isc/secrets/*.*","\n",
		  "sudo chown cacheusr:cacheusr /tmp/apns.ssl.xml","\n",
		  "sudo chown cacheusr:cacheusr /tmp/gcmchrome.ssl.xml","\n",
		  "sudo chmod +r /var/isc/secrets/*.*","\n",

		  "# Install package/install patch\n",
		  "sudo cp /home/admin/ens-ec2-cloud/package/install /home/admin/isc_install/package/install","\n",
		  "echo 'Installed package/install patch' >> /home/admin/cloudformation.log","\n",

		  "# Install Cache\n",
		  "sudo ISC_PACKAGE_INSTANCENAME='", { "Ref" : "IscInstanceName" },"' ",
			"ISC_PACKAGE_PLATFORM='lnxsusex64' ",
			"ISC_PACKAGE_INSTALLDIR='", { "Ref": "IscInstallDir" },"' ",
 			"ISC_PACKAGE_INITIAL_SECURITY='", { "Ref":"IscInitialSecurity" },"' ",
 			"ISC_PACKAGE_MGRUSER='", { "Ref": "IscMgrUser" },"' ",
		    "ISC_PACKAGE_MGRGROUP='", { "Ref" : "IscMgrGroup" },"' ",
 			"ISC_PACKAGE_USER_PASSWORD='", { "Ref" : "IscUserPassword" },"' ",
			"/home/admin/isc_install/cinstall_silent database_server ensemble_databases ",
			" || error_exit 'Failed to install Cache'\n",

		  "echo 'Installed Cache' >> /home/admin/cloudformation.log","\n",
		  "# Start Cache - not needed since install should start it\n",
		
		  "# Run setup script for demo","\n",
		  "sudo /tmp/setup.zencloudmessaging | sudo tee  -a /home/admin/cloudformation.log","\n",

          "# All is well so signal success\n",
          "sudo cfn-signal -e 0 -r \"IscServer setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",
          "sudo cfn-signal -e 0 -r \"IscServer setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}        
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "IscServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "43200"
      }
    },
    
    "IscSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable default InterSystems ports and ssh",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "1972", "ToPort" : "1972", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "57772", "ToPort" : "57772", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "9980", "ToPort" : "9999", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }      
    }
  },
  
  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "IscServer", "PublicDnsName" ]}, ":57772",
					"/csp/sys/UtilHome.csp" ]] },
      "Description" : "URL for Ensemble"
    }
  }
}
